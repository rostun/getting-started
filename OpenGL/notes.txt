	//so your uniforms are global variables for all the shaders
	//so the model view matric and the other is perspective matrix 
	//model view matrix lets you reposition your object, its how you move stuff around 
	//model view matrix (positioning in space of your vertex)
	uniform mat4 uMVMatrix;
	//uP is for camera view, later on this (we'll get a library) will let you do a perspective projection
	//when we do 2d in unity we turn this off
	//perspective matrix (camera)
	uniform mat4 uPMatrix;
	 
		//So what we're doing here
		//is we're modifying uPMatrix and uMVMatrix 
		gl_Position = uPMatrix * uMVMatrix * oPosition;

10. write the two shader functions getShader() and initShaders, but not mesh yet so still black

function initGL(){
	//initilaize the buffers 
	var buffers = initBuffers();
	//groups of three, type, normalized? stride, offset 
	//stride: how many it skips
		//you can interweave the data so then in your array you ahve position then normal then uv all in one array
		//but here we only have position so our stride is 0 
	//offset: 0 (so if we had normal and uv then we have 6 normals, 6 uvs etc)
	gl.vertexAttribPointer(positionAttributeLocation, 3, gl.FLOAT, false, 0, 0);
	
	//vertex buffer object, index buffer object 
	//binding those again before we draw
	//that specifies what we want to draw 
	gl.bindBuffer(gl.ARRAY_BUFFER, buffers.vbo);
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.ibo);
	
	//arguments: mode, number, type, offset
	//mode is how you want to draw it, it could be points, it could be lines, triangles, traignle strip, etc 
	//TRIANGLES: draw these unconnected triangles 
	//number: how many indices you are drawing (size of index array whihc is 6)
	//type: type of the number you are giving it, which is either unsigned byte or unsigned short (short is a 16 bit integer, other is 8)
	//offest: where you want to start in the array, but we're starting at the beginning which is 0
	gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
	gl.drawArrays(gl.TRIANGLES, 0, 3);
	return gl;
} 

function initBuffers(){
	//creates a vertex buffer object 
	//just an empty buffer, getting ready to hold stuff
	var quadBuffer = gl.createBuffer();
	
	//put stuff in it 
	//you're saying that this buffer is being bound to the openGL thing that is ARRAY_BUFFER 
	//other one is ELEMENT_ARRAY_BUFFER 
	//binding triBuffer to ARRAY_BUFFER 
	gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
	
	//specifying what the vertices are, position of triangle vertices  
	//set up geometry properly!
	//x y z
	//homogonous add 1, x y z w but w is always 1 becuase basically 
	//it lets you multiple the values with the matrix
	var vertices = [
		 1.0,  1.0, 0.0, //0
		-1.0,  1.0, 0.0, //1
		-1.0, -1.0, 0.0, //2
		 1.0, -1.0, 0.0  //3
	];
	
	//Float32Array is a typed array that just exists in javascript
	//creating an array out of the vertices we just made (vertex information) 
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	
	//different from guide 
	//index geometry - allows you to reuse vertices 
	//for example a square is made of two triangles = 6 vertices with two vertices reused
	//this allows you to reference an existing vertex 
	var indexBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
	
	//two triangles, 2 1 0, and the second is 3 2 0 
	var indices = [2, 1, 0, 3, 2, 0]; //refrence vertices 
	
	//create array out of vertices we just made, this time giving index information 
	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
	
	//javascript shorthand for making an object 
	//two properties (vbo and ibo) which stores both buffer objects to return it 
	var buffers = {vbo:quadBuffer, ibo:indexBuffer};
	return buffers;
}

12. now we need to use two libraries 

this library is for matrix and vector math, makes things easier!
http://sylvester.jcoglan.com/
sylvester.js is the minified version, but i like to keep both for reading purposes ;)
	when things go wrong you can take a look at the function and see if you used it wrong 
utility functions for making [perspective] matrices and frustums (kind of like a four sided pyramid with the top cut off)
(whole thing is for making a perspective matrix)
its this math thing you need to make that, which isn't that interesting so we're going to use this thing 
we could just copy those, but they've done it already so there's really no need to rewrite the code, but you could 
if you want to, come back when you have 
https://github.com/mdn/webgl-examples/blob/gh-pages/tutorial/glUtils.js

		<script src="libraries/sylvester.js"></script>
		<script src="libraries/glUtils.js"></script>

13. before you draw we're gonna move things around a bit

remove draw arrays (no draw arrays ever) <--fo testing purposes if not doing index 
		
		void main(void){
			oPosition = vec4(position, 1.0);
			gl_Position = uMVMatrix * oPosition;
			//gl_Position = uPMatrix * uMVMatrix * oPosition;
			//oNormal = normal;
			//oUv = uv;
		}

